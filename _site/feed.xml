<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-09-24T23:42:35-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">Monte Carlo Options Pricing</title><link href="http://localhost:4000/blog/2024/monte-carlo-options-pricing/" rel="alternate" type="text/html" title="Monte Carlo Options Pricing" /><published>2024-09-23T20:00:00-04:00</published><updated>2024-09-23T20:00:00-04:00</updated><id>http://localhost:4000/blog/2024/monte-carlo-options-pricing</id><content type="html" xml:base="http://localhost:4000/blog/2024/monte-carlo-options-pricing/"><![CDATA[<p>The infamous Black-Scholes option pricerm perhaps the most stereotypical quant project one can have on their resume. As my first project in the field of quantitative finance, I figured I should at least do a little bit more than code up a number cruncher, so I decided to make a Monte Carlo options pricer instead (based on the Black-Scholes model). I may come to update this page later if I add more features to the options pricer.</p>

<h2 id="the-black-scholes-equation">The Black-Scholes Equation</h2>
<p>The <a href="https://en.wikipedia.org/wiki/Black–Scholes_equation">Black-Scholes equation</a>  in short predicts the price of a option based on a variety of factors, the most important of which are time and stock price. It works only for European markets where stocks cannot expire before maturity time, doesn’t account for risk in the interest rate, and assumes the market changes follow geometric Brownian motion. For the purposes of this article, we will be focusing on the mathematics and computation of the call price, as put prices follow a symmetrical implementation.</p>

<p>Let \(S,t,\mu,\sigma,K,T\) denote the stock price, time since purchase (in days), risk-free interest rate, volatility, strike price (in same units as stock and call prices) and maturity time (in days) of the option. We wish to find the call price \(C\) of an option given these variables, which we assume exists and is well-defined for all inputs (\(\mu,\sigma,T\) are all constants, so \(C=C(S,t)\)). Per Ito’s Lemma:</p>

\[dC = \frac{\partial C}{\partial t}dt + \frac{\partial C}{\partial S}dS + \frac{1}{2}\frac{\partial^2 C}{\partial S^2}dS^2\]

<p>Since the stock price follows geometric Brownian motion, we know \(dS = \mu Sdt + \sigma SdX\) where X is a schocastic variable. Subsituting this in, we find:</p>

\[dC = (\frac{\partial C}{\partial t} + \mu S\frac{\partial C}{\partial S} + \frac{1}{2}\sigma^2 S^2 \frac{\partial^2 C}{\partial S^2})dt + \sigma S\frac{\partial C}{\partial S}dX\]

<p>Performing delta hedging (\(\Delta = -\frac{\partial C}{\partial S}\)), we find:</p>

\[d(C+\Delta S) = (\frac{\partial C}{\partial t} + \frac{1}{2}\sigma^2 S^2 \frac{\partial^2 C}{\partial S^2})dt\]

<p>Which when rearranged produces the Black-Scholes PDE.</p>

\[\frac{\partial C}{\partial t} + rS\frac{\partial C}{\partial S} + \frac{1}{2}\sigma^2 S^2 \frac{\partial^2 C}{\partial S^2} - rC = 0\]

<p>Where \(0\leq t\leq T\) and the boundary condition \(C(S, T) = \max(S_T - K, 0)\) is applied. From here, we have a second order partial differential equation whose solution has been <a href="https://uregina.ca/~kozdron/Teaching/Regina/441Fall14/Notes/L26-27-Nov5.pdf">well studied</a>. What matters for us is that the solution to this PDE gives us:</p>

\[C=N(d_1)S_t - N(d_2)Ke^{-rt}\]

\[d_2 = d_1 - \sigma\sqrt{t}\]

\[d_1 = \frac{\text{ln}\ \frac{S_0}{K} + (r^2 + \frac{\sigma^2}{2}t)}{\sigma\sqrt{t}}\]

<p>Where \(N\) is the cumulative distribution function of the normal distribution. A standard Black-Scholes option pricer would just plug numbers into the above formulas to spit out results, but we will utilize Monte Carlo methods as practice for future, more complicated models.</p>

<h2 id="monte-carlo">Monte-Carlo</h2>
<p>What exactly is Monte Carlo? Well, it’s a famous casino in Monaco, but for the purposes of this article, it’s a genre of techniques involving simulating a large amount of random runs and aggregating the results. For us, that translates to simulating call prices over many runs and averaging the payoff of the end prices. To do this, we have to translate the formula from the previous section into a run generator:</p>

\[S_i(t) = S_0\cdot \text{exp}\ ((r^2 - \frac{1}{2}\sigma^2)t + \sigma\sqrt{t}Z_i)\]

\[C_0 = e^{-rT}\frac{1}{N}\sum_{i}^{N}\max{S_i(T) - K, 0}\]

\[P_0 = e^{-rT}\frac{1}{N}\sum_{i}^{N}\max{K - S_i(T), 0}\]

<p>Where \(Z_i\) is a series of normally distributed schocastic variables and \(N\) is the number of runs. The implementation of this simulation is pretty straight forward from here on out, but if desired, the source code for my webste (in assets/js/posts/monte-carlo-options-pricing.js) contains the Javascript implementation I used for the visualizer below. Furthermore, a C++ implementation is on my options-pricer project, which can be found under the Projects tab in the navigation bar.</p>

<p>A visualization of a randomly generated stock price time series.</p>

<div id="plot-0"></div>
<p><br />
<span class="slider-container">
    <span class="slider-label">\(T:\)</span>
    <span class="slider-value" id="days-slider-value">0</span>
    <span>
        <input class="slider" id="days-slider" type="range" min="0" max="1825" value="0" step="1" />
    </span>
</span></p>

<p><span class="slider-container">
    <span class="slider-label">\(\mu:\)</span>
    <span class="slider-value" id="mean-slider-value">0</span>
    <span>
        <input class="slider" id="mean-slider" type="range" min="-1" max="1" value="0" step="0.01" />
    </span>
</span></p>

<p><span class="slider-container">
    <span class="slider-label">\(\sigma:\)</span>
    <span class="slider-value" id="sigma-slider-value">0</span>
    <span>
        <input class="slider" id="sigma-slider" type="range" min="0" max="1" value="0" step="0.01" />
    </span>
</span></p>

<p>And a visualization of averaging the payoff from \(N\) randomly generated runs (the other variables are fixed for computational speed: \(T=100,\mu=15\%,\sigma=5\%\)).</p>
<div id="plot-1"></div>
<p><br />
<span class="slider-container">
    <span class="slider-label">\(N:\)</span>
    <span class="slider-value" id="traces-slider-value">0</span>
    <span>
        <input class="slider" id="traces-slider" type="range" min="0" max="100" value="0" step="1" />
    </span>
</span>
<!-- <div>Average Call Price: <p id="mean-call-price"></p></div> -->
<script src="https://cdn.plot.ly/plotly-2.4.2.min.js"></script>
<script src="/assets/js/posts/monte-carlo-options-pricing.js"></script></p>]]></content><author><name></name></author><category term="posts" /><category term="math" /><category term="cs" /><category term="finance" /><summary type="html"><![CDATA[Randomness]]></summary></entry><entry><title type="html">D.E. Shaw Connect 2024</title><link href="http://localhost:4000/blog/2024/de-shaw-connect-2024/" rel="alternate" type="text/html" title="D.E. Shaw Connect 2024" /><published>2024-09-09T20:00:00-04:00</published><updated>2024-09-09T20:00:00-04:00</updated><id>http://localhost:4000/blog/2024/de-shaw-connect-2024</id><content type="html" xml:base="http://localhost:4000/blog/2024/de-shaw-connect-2024/"><![CDATA[<p>So I was going through the summer Leetcode grind when I went to check my emails during a break, and guess what I found?</p>

<p><img src="/assets/img/posts/2024-09-10-de-shaw-connect-2024/connect-2024.jpg" width="400px" height="500px" /></p>

<p>I guess D.E. Shaw loved me so much last year that they flew me out to NYC again (jk lol). I really didn’t expect them to fly me out two years in a row, but I’ll take the wins where I can.</p>

<p>This year’s event was much earlier than last year’s event, and it actually conflicted with the CMU career fair. But I don’t see any of those companies literally dropping $2k for me to go to NYC, so my mind was set from the start. I didn’t even have to wait that long, since I left for NYC on the second week of school.</p>

<p>So since I went last year, I had a gameplan this year to connect with as many people as possible. I mean, the event is called Connect after all, right? This year, there were quite a few people going from CMU that I recognized, as well as some of my high school friends who went to other schools. Just like before, the venue was impressive (this time they booked the entire American Museum of Modern Art) and the food was top-notch. Seeing as how I’m getting into cooking, I tried asking the chefs how they made such bomb food, but they wouldn’t tell me, and the waiters and waitresses had no clue either. Highly unfortunate. Just like last year, D.E. Shaw dropped at least $1k on each student there, but this time, there were 1000 students (vs 500 last year), so the total cost was definitely in the millions. It’s just mind blowing how these D.E. Shaw can host such grandiose events like Connect yearly. But in retrospect, compared to a future trader making millions a year for them in the future, this is a pretty effective way of getting into the minds of top talent early in their careers.</p>

<p>Anyway, I met plently of people, talked for a while with literally every person I met, etc. Even though the whole point of the event was to connect with others, everyone was just super kind and down to chat and connect, it was a nice change of pace from how students are at CMU. I was checking out the different floors when I met up with a good friend of mine from IMSA, Dean Barrow. It was crazy seeing him there, since the last time we met he told me he’d rather do startups than quant, but we got to catch up after a while.</p>

<p>After the event, I joined Dean with a bunch of other kids at a resteraunt in K-town (Shanghai Mong) where I had the classic soju party experience (also something suprisingly rare in CMU, despite the large Asian population). I got to know a lot of Stanford kids (like suprisingly, at least half the table was from Stanford) on a deeper basis than the main event, and I got to relax a bit and just talk about random stuff. A lot more happened there but I’ll keep that stuff private, since this is my professional blog page after all. Either way, stuff happened and suddenly it was 3:30am in Times Square and Dean had to walk me back to my hotel, then I fell asleep.</p>

<p>The next day I woke up feeling fine, but I quickly realized my brain wasn’t gonna function (makes since, since I had a hangover and like 4 hours of sleep). I tried touring NYC like last year but only got to wander around Manhattan, since the World Trade Center was closed for the memorial and there wasn’t much else to see on Wall Street. So instead, I tagged along with Dean in meeting up with Jason (from last year), except this time I didn’t tell him I was coming (for extra suprise). I just arrived at the meeting place and walked by Jason, who recognized me like immediately. And then he proceeded to wonder why I was there instead of Dean, and why I was in NYC again. Good times.</p>

<p>I flew back to CMU later (still dealing with the hangover), and it took me like a week to fix my sleep schedule. But I’d still give the experience a 10/10. It really can’t get much better than a free two day NYC trip where you get pompered by a quant firm and get to meet cracked peers. If D.E. Shaw somehow decides to invite me back for a third year, I’m down to go again.</p>]]></content><author><name></name></author><category term="posts" /><category term="life" /><summary type="html"><![CDATA[Back for round 2]]></summary></entry><entry><title type="html">ASCII Art</title><link href="http://localhost:4000/blog/2024/ascii-art/" rel="alternate" type="text/html" title="ASCII Art" /><published>2024-02-05T06:32:00-05:00</published><updated>2024-02-05T06:32:00-05:00</updated><id>http://localhost:4000/blog/2024/ascii-art</id><content type="html" xml:base="http://localhost:4000/blog/2024/ascii-art/"><![CDATA[<p>Art is everywhere we look.</p>

<p>Take the internet, for example. From the minimalist design of this blog page, to the news articles we read and the memes we spend hours on Youtube watching. Wherever we go, whatever we make, we inject some amount of art into the environment. Most of us take this for granted, but good design helps our mental health tremendously, especially as people are spending more and more time on the internet.</p>

<p>But I’d like to focus your attention on one extraordinary example of this principle. Even in the black and white, rigidly structured environment of a terminal, people have managed to create art.</p>

<p>If you’re a CMU student, then you’ll have probably encountered this screen at some point:</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
    <img src="/assets/img/posts/2024-02-05-ascii-art/linux-cmu-logo.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>You see it after logging into your AFS enviroment.</p>

<p>The first time I encountered this, in the middle of 15-122 recitation, I thought it was neat. I took a screenshot of it and told myself that I’d put it somewhere on my website eventually. And here we are.</p>

<p>But this post is more than just an excuse to share this ASCII rendering of the Scotty Shield. After looking into it more, it seems the world of ASCII art is much deeper than I could’ve imagined.</p>

<p>A very famous piece of ASCII art (at least for programmers) is the spinning donut. Credits go to Andy Sloane, who wrote the <code class="language-plaintext highlighter-rouge">donut.c</code> file below</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>             <span class="n">k</span><span class="p">;</span><span class="kt">double</span> <span class="nf">sin</span><span class="p">()</span>
         <span class="p">,</span><span class="n">cos</span><span class="p">();</span><span class="n">main</span><span class="p">(){</span><span class="kt">float</span> <span class="n">A</span><span class="o">=</span>
       <span class="mi">0</span><span class="p">,</span><span class="n">B</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">z</span><span class="p">[</span><span class="mi">1760</span><span class="p">];</span><span class="kt">char</span> <span class="n">b</span><span class="p">[</span>
     <span class="mi">1760</span><span class="p">];</span><span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\x1b</span><span class="s">[2J"</span><span class="p">);</span><span class="k">for</span><span class="p">(;;</span>
  <span class="p">){</span><span class="n">memset</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">1760</span><span class="p">);</span><span class="n">memset</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">7040</span><span class="p">)</span>
  <span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mf">6.28</span><span class="o">&gt;</span><span class="n">j</span><span class="p">;</span><span class="n">j</span><span class="o">+=</span><span class="mf">0.07</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mf">6.28</span>
 <span class="o">&gt;</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="mf">0.02</span><span class="p">){</span><span class="kt">float</span> <span class="n">c</span><span class="o">=</span><span class="n">sin</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="n">d</span><span class="o">=</span><span class="n">cos</span><span class="p">(</span><span class="n">j</span><span class="p">),</span><span class="n">e</span><span class="o">=</span>
 <span class="n">sin</span><span class="p">(</span><span class="n">A</span><span class="p">),</span><span class="n">f</span><span class="o">=</span><span class="n">sin</span><span class="p">(</span><span class="n">j</span><span class="p">),</span><span class="n">g</span><span class="o">=</span><span class="n">cos</span><span class="p">(</span><span class="n">A</span><span class="p">),</span><span class="n">h</span><span class="o">=</span><span class="n">d</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="n">D</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">c</span><span class="o">*</span>
 <span class="n">h</span><span class="o">*</span><span class="n">e</span><span class="o">+</span><span class="n">f</span><span class="o">*</span><span class="n">g</span><span class="o">+</span><span class="mi">5</span><span class="p">),</span><span class="n">l</span><span class="o">=</span><span class="n">cos</span>      <span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="n">m</span><span class="o">=</span><span class="n">cos</span><span class="p">(</span><span class="n">B</span><span class="p">),</span><span class="n">n</span><span class="o">=</span><span class="n">s</span>\
<span class="n">in</span><span class="p">(</span><span class="n">B</span><span class="p">),</span><span class="n">t</span><span class="o">=</span><span class="n">c</span><span class="o">*</span><span class="n">h</span><span class="o">*</span><span class="n">g</span><span class="o">-</span><span class="n">f</span><span class="o">*</span>        <span class="n">e</span><span class="p">;</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">40</span><span class="o">+</span><span class="mi">30</span><span class="o">*</span><span class="n">D</span><span class="o">*</span>
<span class="p">(</span><span class="n">l</span><span class="o">*</span><span class="n">h</span><span class="o">*</span><span class="n">m</span><span class="o">-</span><span class="n">t</span><span class="o">*</span><span class="n">n</span><span class="p">),</span><span class="n">y</span><span class="o">=</span>            <span class="mi">12</span><span class="o">+</span><span class="mi">15</span><span class="o">*</span><span class="n">D</span><span class="o">*</span><span class="p">(</span><span class="n">l</span><span class="o">*</span><span class="n">h</span><span class="o">*</span><span class="n">n</span>
<span class="o">+</span><span class="n">t</span><span class="o">*</span><span class="n">m</span><span class="p">),</span><span class="n">o</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="mi">80</span><span class="o">*</span><span class="n">y</span><span class="p">,</span>          <span class="n">N</span><span class="o">=</span><span class="mi">8</span><span class="o">*</span><span class="p">((</span><span class="n">f</span><span class="o">*</span><span class="n">e</span><span class="o">-</span><span class="n">c</span><span class="o">*</span><span class="n">d</span><span class="o">*</span><span class="n">g</span>
 <span class="p">)</span><span class="o">*</span><span class="n">m</span><span class="o">-</span><span class="n">c</span><span class="o">*</span><span class="n">d</span><span class="o">*</span><span class="n">e</span><span class="o">-</span><span class="n">f</span><span class="o">*</span><span class="n">g</span><span class="o">-</span><span class="n">l</span>        <span class="o">*</span><span class="n">d</span><span class="o">*</span><span class="n">n</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">22</span><span class="o">&gt;</span><span class="n">y</span><span class="o">&amp;&amp;</span>
 <span class="n">y</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">x</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="mi">80</span><span class="o">&gt;</span><span class="n">x</span><span class="o">&amp;&amp;</span><span class="n">D</span><span class="o">&gt;</span><span class="n">z</span><span class="p">[</span><span class="n">o</span><span class="p">]){</span><span class="n">z</span><span class="p">[</span><span class="n">o</span><span class="p">]</span><span class="o">=</span><span class="n">D</span><span class="p">;;;</span><span class="n">b</span><span class="p">[</span><span class="n">o</span><span class="p">]</span><span class="o">=</span>
 <span class="s">".,-~:;=!*#$@"</span><span class="p">[</span><span class="n">N</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="n">N</span><span class="o">:</span><span class="mi">0</span><span class="p">];}}</span><span class="cm">/*#****!!-*/</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\x1b</span><span class="s">[H"</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">1761</span><span class="o">&gt;</span><span class="n">k</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
   <span class="n">putchar</span><span class="p">(</span><span class="n">k</span><span class="o">%</span><span class="mi">80</span><span class="o">?</span><span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">:</span><span class="mi">10</span><span class="p">);</span><span class="n">A</span><span class="o">+=</span><span class="mf">0.04</span><span class="p">;</span><span class="n">B</span><span class="o">+=</span>
     <span class="mf">0.02</span><span class="p">;}}</span><span class="cm">/*****####*******!!=;:~
       ~::==!!!**********!!!==::-
         .,~~;;;========;;;:~-.
             ..,--------,*/</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>which produces a spinning donut animation:</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
    <img src="/assets/img/posts/2024-02-05-ascii-art/donut.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Crazy.</p>

<p>You’ve probably heard the explanation for how it works before, but in case you haven’t, <a href="https://www.a1k0n.net/2011/07/20/donut-math.html">this</a> article explains it pretty well.</p>

<p>The techniques used to generate the donut animation are actually the same ones commonly used throughout computer graphics. However, what sets it apart is that it’s all done right in the terminal, with certain ASCII symbols corresponding to brightness values. I think it’s quite neat.</p>

<p>There’s thousands of examples of ASCII art on the internet. The most common technique is to just take an existing video and match the brightness values to ASCII characters, rather than generating the animation itself like in the donut animation. In fact, here’s a <a href="https://www.asciiart.eu/">website</a> dedicated to ASCII art.</p>

<p>If there’s one takeaway to be had from this post, I guess it’d be to appreciate how our artistic instincts can reach every corner of the known world, including the metaphysical world (the internet included). Even (or especially) in the dullest, most structured environments, art still shines through. And I think we should take a moment to appreciate that.</p>

<p>Because our terminals would be a lot emptier without art.</p>]]></content><author><name></name></author><category term="posts" /><category term="art" /><category term="cs" /><summary type="html"><![CDATA[A post to appreaciate ASCII art.]]></summary></entry><entry><title type="html">Convergence in $$\mathbb{R}^{2}$$</title><link href="http://localhost:4000/blog/2024/convergence-in-r2/" rel="alternate" type="text/html" title="Convergence in $$\mathbb{R}^{2}$$" /><published>2024-02-04T19:00:00-05:00</published><updated>2024-02-04T19:00:00-05:00</updated><id>http://localhost:4000/blog/2024/convergence-in-r2</id><content type="html" xml:base="http://localhost:4000/blog/2024/convergence-in-r2/"><![CDATA[<p>If you’ve ever done competition math, you’ll probably have encountered something similar to this problem before:</p>

<blockquote>
  <p>A robot starts at the origin of the Cartesian plane facing the positive x-direction and moves in the following manner. At each timestep \(k\), the robot moves \(k\) units in the direction it is facing and then rotates an angle \(\theta\) counterclockwise. Find the position of the robot after \(n\) steps.</p>
</blockquote>

<p>A similar type of problem appeared in the Ross Program’s 2023 Application Set. Let’s walk through the solution, and along the way, we’ll encounter the main highlight of this post.</p>

<p>As with all problems, quantifying the problem statement will make the solution much clearer. Let \(p_{k}\) be the position of the robot at timestep \(k\) (so \(p_{0}=(0,0),\ p_{1}=(1,0),\) etc). It’s clear that the direction the robot faces after \(k\) timesteps is \((k-1)\theta\). Then going by the problem description, we gain a recursive defition for \(p_{n},\) which quickly turns into a summation formula once we repeatedly apply the recursive definition:</p>

\[\begin{align*}
p_{n} &amp;= p_{n-1} + (n\cos((n-1)\theta), n\sin((n-1)\theta))\\
&amp;\vdots\\
&amp;=p_{0}+\sum_{k=1}^{n}(k\cos((k-1)\theta), k\sin((k-1)\theta))\\&amp;=\sum_{k=1}^{n}(k\cos((k-1)\theta), k\sin((k-1)\theta))
\end{align*}\]

<p>If this is your first time seeing such a problem, you might ask yourself “how am I going to compute this?” Sure, you could plug the whole thing into WolframAlpha, but that’s cheating (and when I first encountered this problem, Wolfram timed out on me).</p>

<p>Here comes the star of this post: complex numbers.</p>

<p>To quickly summarize complex numbers for those of you who need a refresher, we essentially set \(i=\sqrt{-1}\) and treat \(a+bi\) as a 2D number along the \(1-i\) plane, analogous to the point \((a,b)\) in \(\mathbb{R}^{2}.\) The reason we introduce complex numbers is because of Euler’s formula: \(e^{i\theta}=cos(\theta)+i\sin(\theta).\) We can express points in \(\mathbb{R}^{2}\) as singular variables which we can do algebra with.</p>

<p>To demonstrate what I mean, define \(z=e^{i\theta},\) and let \([p_{n}]\) denote the analogous complex number to \(p_{n}\). Note that per Euler’s formula, our sum simplifies to:</p>

\[\begin{align*}
[p_{n}]&amp;=\sum_{k=1}^{n}kz^{k-1}=\sum_{k=1}^{n}\frac{d}{dz}z^{k}=\frac{d}{dz}\sum_{k=1}^{n}z^{k}\\
&amp;=\frac{d}{dz}\frac{z(z^{n}-1)}{z-1}=\frac{nz^{n+1}-(n+1)z^{n}+1}{(z-1)^{2}}
\end{align*}\]

<p>Just like that, we have a simple, closed form expression for what is basically \(p_{n},\) the answer to the problem. To get rid of the pesky complex number at the bottom, we can multiply the numerator and denominator by the conjugate of \((z-1)^{2}\). Plugging in \(z=e^{i\theta}\) gets us the formula in terms of \(n,\ \theta.\) You could even compute the limit of this formula to see if and where the robot converges.</p>

<p>The first time I found this solution, I was blown away that we could compute the endpoint of such a complicated process with math. I thought I would need a computer for sure! But what fascinated me more was the technique of applying algebra to complex expressions, as if the techniques from algebra on real expressions carried over without exception.</p>

<p>So, why does this work? It’s primarily due to the fact that the deriative and the identity we used,</p>

\[\sum_{k=1}^{n}z^{k}=\frac{z(z^{n}-1)}{z-1}\]

<p>only depend on the linearity, distributivity, additive closure, and multiplicative closure of the algebraic structure we’re working in. As fields, both \(\mathbb{R}\) and \(\mathbb{C}\) fufill those properties and more, meaning the algebraic identity carried over without exception from the reals to the complex numbers. Even better, we can apply that identity to any other number system or algebraic structure which has those properties (assuming the definition of exponentiation is analogous to how we defined it). Abstract algebra is beyond the scope of this post, though, so don’t worry if you’re reading this and don’t know what a field is.</p>

<p>It’s easy to see the applications. The solution to the problem could be applied to robotics, and physicists often use this technique to model oscillations, since computation becomes much simpler.</p>

<p>If math had a theme, it would be that everything is simple from the right perspective. The theme rings true here as well. From the initial perspective, the formula for \(p_{n}\) looked like a mess that I wouldn’t want to touch. Through a different perspective, it changes into a simple closed-form expression. Easy to see in hindsight, but evasive to first timers.</p>

<p>It’s through moments like these that I’m reminded of the beauty of math.</p>]]></content><author><name></name></author><category term="posts" /><category term="math" /><summary type="html"><![CDATA[Why do I see imaginary numbers?]]></summary></entry><entry><title type="html">D.E. Shaw Connect 2023</title><link href="http://localhost:4000/blog/2023/de-shaw-connect-2023/" rel="alternate" type="text/html" title="D.E. Shaw Connect 2023" /><published>2023-09-20T20:00:00-04:00</published><updated>2023-09-20T20:00:00-04:00</updated><id>http://localhost:4000/blog/2023/de-shaw-connect-2023</id><content type="html" xml:base="http://localhost:4000/blog/2023/de-shaw-connect-2023/"><![CDATA[<p>When I first got this email, I thought it was a scam:</p>

<p><img src="/assets/img/posts/2023-09-21-de-shaw-connect-2023/connect-2023.jpg" width="400px" height="500px" /></p>

<p>It wasn’t until I read through the entire email that I realized this was <b>the</b> D.E. Shaw flying me out to NYC for free. And yes, in case you’re wondering, I entered college on August 23rd, 2023. Which means about one month into my freshman year of college, I was already travelling across the country for networking and career events. Crazy.</p>

<p>So obviously I accepted the trip, booked my hotel and flights, and passed through September until the day came. It felt like waiting for an early fall break, but if it only lasted two days. I hopped on my flight, got to my hotel in Midtown, dropped off my stuff, and then went to explore NYC. I visited some Midtown tourist attractions (Times Square was really close to my hotel) and then I promptly got lost in Central Park, which took a solid two hours to navigate out from. But by coincidence, I happened to wander to the venue for the Connect 2023 event.</p>

<p>My first impressions of the venue were quite amazing. As it stated further down in the email, they rented out the entire American Museum of Natural History, then topped it off with some fire poke bowls and steak, I mean the entire thing was very impressive (especially for just out of high school me). I mean based on conversations with some of the other invitees, D.E. Shaw likely dropped at least $1000 on each person there, and that’s not including the food and venue costs. If their goal was to impress, then I was blown away.</p>

<p>I met some very cool people at the event, usually from mutual connects (like I knew someone who knew them), talked with the recruiters a bit, and met some of my friends from high school and before at the event (like Ryan Liu). It turns out that I was one of a select few freshman invited to the event, which made me feel a bit special until I later realized that we were invited by mistake. Either way though, it was a great opportunity to meet peers from top schools across the country as well as connect with people I haven’t seen for a while. I went over to someone’s hotel room afterwards and just played some poker until ungodly hours into the night.</p>

<p>Partially due to my lack of sleep and the high energy throughout the previous day’s event, as well as my social battery being drained, I cancelled all my plans to sightsee NYC. Instead I decided on suprising my friend at Columbia (shoutout to Jason Qin) by just dropping into Columbia last minute. Then I sort of just tagged along with him and his roommate Luis for the day, just because why not. Columbia has a beautiful campus and it’s in the heart of NYC, but the food is god awful especially compared to off campus resteraunts and the venue food. I found out that day that I could enter Columbia’s library with my CMU ID, which was cool to know (there’s a list of peer schools and CMU was on the list apparently), especially when I had to take an exam for one of my classes on Zoom. Beautiful library by the way.</p>

<p>Overall I’d rate this trip 10/10. It was a short (two day) in and out NYC experience, but I probably absorbed a week’s worth of experiences in that time because when I got back to CMU, I just wanted to sleep for a whole day. I’d definitely go again if I had the chance to.</p>

<p><img src="/assets/img/posts/2023-09-21-de-shaw-connect-2023/columbia-2023.jpeg" width="600px" height="450px" /></p>]]></content><author><name></name></author><category term="posts" /><category term="life" /><summary type="html"><![CDATA[NYC + Networking]]></summary></entry><entry><title type="html">CS Curriculum at CMU</title><link href="http://localhost:4000/blog/2023/cmu-courses/" rel="alternate" type="text/html" title="CS Curriculum at CMU" /><published>2023-08-22T20:00:00-04:00</published><updated>2023-08-22T20:00:00-04:00</updated><id>http://localhost:4000/blog/2023/cmu-courses</id><content type="html" xml:base="http://localhost:4000/blog/2023/cmu-courses/"><![CDATA[]]></content><author><name></name></author><category term="posts" /><category term="life" /><summary type="html"><![CDATA[The grind begins.]]></summary></entry></feed>